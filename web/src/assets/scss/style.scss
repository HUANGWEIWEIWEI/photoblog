@import './variables';

//样式重置

*{
    box-sizing: border-box;//以边框为准，加了padding不会撑大网页
    outline: none;
}

html {
    font-size: 13px;
  }
  body {
    margin: 0;
    font-family: Arial, Helvetica, sans-serif;
    line-height: 1.2em;
    background:#E9EEF3;
    -webkit-font-smoothing: antialiased;
  }
  a {
    color: #999;
  }
  p {
    line-height: 1.5em;
  }
  
  //把颜色定义成变量，@each表示循环，
  @each $colorKey, $color in $colors {
    .text-#{$colorKey} {//文本颜色工具类
      color: $color;
    }
    .bg-#{$colorKey} {//背景颜色工具类
      background-color: $color;
    }
  }
  // text align,定义对齐方式
  @each $var in (left, center, right) {
    .text-#{$var} {
      text-align: $var !important;
    }
  }
  
    // 定义字体尺寸
  @each $sizeKey, $size in $font-sizes {
    .fs-#{$sizeKey} {
      font-size: $size * $base-font-size;
    }
  }
  // text overflow
  .text-ellipsis {
    display: inline-block;
    overflow: hidden;
    text-overflow: ellipsis;
    white-space: nowrap;
  }
  
  // width, height
  .w-100 {
    width: 100%;
  }
  .h-100 {
    height: 100%;
  }

  // flex布局h
  .d-flex {
    display: flex;//水平方向布局
  }
  .flex-column {
    flex-direction: column;//从上到下的布局
  }
  .flex-wrap {
    flex-wrap: wrap;
  }
  
  //主轴的对齐方式
  @each $key, $value in $flex-jc {
    .jc-#{$key} {
      justify-content: $value;
    }
  }
  
  //交叉轴方向的对齐方式
  @each $key, $value in $flex-ai {
    .ai-#{$key} {
      align-items: $value;
    }
  }
  .flex-1 {
    flex: 1;
  }
  .flex-grow-1 {
    flex-grow: 1;
  }
  
  // m-0, mx-0
  @each $typeKey, $type in $spacing-types {
    // .m-1
    @each $sizeKey, $size in $spacing-sizes {
      .#{$typeKey}-#{$sizeKey} {
        #{$type}: $size * $spacing-base-size;
      }
    }
    // .mx-1 , .my-1
    @each $sizeKey, $size in $spacing-sizes {
      .#{$typeKey}x-#{$sizeKey} {
        #{$type}-left: $size * $spacing-base-size;
        #{$type}-right: $size * $spacing-base-size;
      }
      .#{$typeKey}y-#{$sizeKey} {
        #{$type}-top: $size * $spacing-base-size;
        #{$type}-bottom: $size * $spacing-base-size;
      }
    }
    // .mt-1
    @each $directionKey, $direction in $spacing-directions {
      @each $sizeKey, $size in $spacing-sizes {
        .#{$typeKey}#{$directionKey}-#{$sizeKey} {
          #{$type}-#{$direction}: $size * $spacing-base-size;
        }
      }
    }
  }


  // button
  .btn {
    border:none;
    border-radius: 0.1538rem;
    font-size: map-get($font-sizes, 'sm') * $base-font-size;
    padding: 0.2rem 0.6rem;
    &.btn-lg {
      display: flex;
      justify-content: center;
      align-items: center;
      i {
        color: map-get($colors, 'primary');
        font-weight: bold;
        font-size: 1.5rem;
        margin-right: 0.5rem;
      }
      background: map-get($colors, 'white-1');
      border: 1px solid map-get($colors, 'white-2');
      padding: 0.8rem 1rem;
      font-size: 1rem;
    }
  }
  // nav
  .nav {
    display: flex;
    .nav-item {
      border-bottom: 3px solid transparent;
      padding-bottom: 0.2rem;
      &.active {
        color: map-get($colors, 'primary');
        border-bottom-color: map-get($colors, 'primary');
      }
    }
    &.nav-inverse {
      .nav-item {
        color: map-get($colors, 'white');
        &.active {
          border-bottom-color: map-get($colors, 'white');
        }
      }
    }
    
  }
  
  // // sprite
  // .sprite {
  //   background: url(../images/index.png) no-repeat 0 0;
  //   background-size: 28.8462rem;
  //   display: inline-block;
  //   &.sprite-news {
  //     width: 1.7692rem;
  //     height: 1.5385rem;
  //     background-position: 63.546% 15.517%;
  //   }
  //   &.sprite-arrow{
  //     width: 0.7692rem;
  //     height: 0.7692rem;
  //     background-position: 38.577% 52.076%;
  //   }
  // }
  
  // borders
  @each $dir in (top, right, bottom, left) {
    .border-#{$dir} {
      border-#{$dir}: 1px solid $border-color;
    }
  }